[github]

[user]

[alias]
    b = branch -vv
    bc = branch --contains
    cdate = "!git --no-pager log -1 --format='%ci'"
    ci = commit
    co = checkout
    d = diff
    dc = diff --cached
    f = fetch --all
    m = merge --no-ff
    r = rebase
    re = reset --hard @{upstream}
    short = rev-parse --short
    st = status -s -b
    up = merge --ff-only @{upstream}
    rl = reflog --date=relative
    stat = diff --stat

    # Perform a merge in-memory and output if any conflicts are found (dry-run)
    # Takes the name of a branch / ref to merge
    mergetest = "!sh -c 'git merge-tree `git merge-base $1 HEAD` $1 HEAD \
        | awk '\\''/^@@/ { print \"Conflicts found\"; exit 1 }'\\''' -"

    l = log --oneline --decorate
    ll = log --stat --decorate --abbrev-commit --date=relative
    lll = log -p --stat --decorate --abbrev-commit --date=relative
    llll = "!sh -c 'git lll $@ \
        | gvim - -R -v -c \"set ft=git\" -c \"set fdm=syntax\"' -"

    # http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
    ctags = !.git/hooks/ctags

    # Open all modified files in EDITOR
    editm = "!$EDITOR $(git ls-files -m)"

    # Alias to make an archive with a prefix set to the name of the repo.
    # git tar <ref> (defaults HEAD)
    tar = "!bash -c 'REF=${1:-HEAD}; \
        BASE=$(basename $(git rev-parse --show-toplevel)); \
        git archive --prefix=${BASE}/ -o ${BASE}-$(git describe ${REF}).tar.gz ${REF}' -"

    # Fetch all remotes in parallel using processes
    fetchall = "!git remote | xargs -I@ -P10 git fetch @"

    # Show the correct SHA for merging from FETCH_HEADS
    showfetchhead = "!awk '!/not-for-merge/ {print $1}' \
        $(git rev-parse --git-dir)/FETCH_HEAD"

    # Compare local branches to remote branches (without doing a fetch!)
    # Takes (optional) remote name as an argument; default: "upstream".
    # FIXME: branches that are ahead of upstream will also be shown.
    showstale = "!bash -c 'join -j 2 \
        <(git show-ref --heads) \
        <(git ls-remote --heads ${1:-upstream}) \
        | awk '\\''{ if ($2 != $3) print $1 }'\\''' -"

    ### Custom Git commands (found in ~/bin)
    # Push only the current branch to the upstream branch
    p = pushcurrent

    # Show individual diffs for all incoming/outgoing changesets
    in = pagediffs ..@{u}
    out = pagediffs @{u}..

    # Configure local clone to also make local refs for all GitHub pull
    # requests for the specified remote
    # Usage: git addrefspr upstream; git fetch upstream; git show upstream/pr/13
    addrefspr = "!sh -c 'git config --add \
        remote.$1.fetch \"+refs/pull/*/head:refs/remotes/$1/pr/*\"' -"

[color]
    ui = auto

[diff]
    tool = clivimdiff

[difftool "clivimdiff"]
    cmd = gvimdiff -v $LOCAL $REMOTE

[merge]
    tool = diffconflicts

[mergetool "diffconflicts"]
    # cmd = $STUFF/scripts/diffconflicts.sh $EDITOR $BASE $LOCAL $REMOTE $MERGED
    <% if get_var :cmddiff %>
    cmd = <%= get_var :cmddiff %>
    <% end %>
    trustExitCode = true
    keepBackup = false

[mergetool "gdiffconflicts"]
    trustExitCode = true
    keepBackup = false
